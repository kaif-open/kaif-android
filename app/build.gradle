apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {

  Properties versionProps = new Properties()
  versionProps.load(new FileInputStream(file('version.properties')))
  def buildVersionCode = versionProps['VERSION_CODE']
  def buildVersionName = versionProps['VERSION_NAME_PREFIX'] + "." + buildVersionCode

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  packagingOptions {
    exclude 'LICENSE.txt'
    exclude 'META-INF/services/javax.annotation.processing.Processor'
  }

  compileSdkVersion 26
  buildToolsVersion rootProject.buildToolsVersion

  sourceSets {
    main.java.srcDirs += 'src/main/kotlin'
  }

  defaultConfig {
    applicationId "io.kaif.mobile"
    minSdkVersion 16
    targetSdkVersion 26
    versionCode buildVersionCode.toInteger()
    versionName buildVersionName
    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
  }

  signingConfigs {
    Properties props = new Properties()
    props.load(new FileInputStream(file('../secret/password.properties')))

    debug {
      storeFile file("../secret/kaif-keystore.jks")
      storePassword props["KEY_STORE_PASSWORD"]
    }
    release {
      storeFile file("../secret/kaif-keystore.jks")
      storePassword props["KEY_STORE_PASSWORD"]
      keyAlias "ReleaseKey"
      keyPassword props["RELEASE_KEY_PASSWORD"]
    }
  }

  buildTypes {
    Properties props = new Properties()
    props.load(new FileInputStream(file('../secret/api.properties')))

    debug {
      signingConfig signingConfigs.debug
      buildConfigField 'String', 'CLIENT_ID', "\"" + props["CLIENT_ID"] + "\""
      buildConfigField 'String', 'CLIENT_SECRET', "\"" + props["CLIENT_SECRET"] + "\""
    }
    release {
      signingConfig signingConfigs.release
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
      buildConfigField 'String', 'CLIENT_ID', "\"" + props["CLIENT_ID"] + "\""
      buildConfigField 'String', 'CLIENT_SECRET', "\"" + props["CLIENT_SECRET"] + "\""
    }
  }

  lintOptions {
    disable 'InvalidPackage'
    abortOnError false
  }

  testOptions.unitTests.all {
    testLogging {
      events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
    }
  }
}

dependencies {
  compile fileTree(dir: 'libs', include: ['*.jar'])

  annotationProcessor "com.google.dagger:dagger-compiler:" + rootProject.daggerVersion
  annotationProcessor 'com.jakewharton:butterknife-compiler:' + rootProject.butterknifeVersion
  annotationProcessor project(':retry-stale-processor')

  provided 'javax.annotation:jsr250-api:1.0'

  compile 'com.android.support:appcompat-v7:' + rootProject.supportLibVersion
  compile 'com.android.support:recyclerview-v7:' + rootProject.supportLibVersion
  compile 'com.android.support:design:' + rootProject.supportLibVersion
  compile 'com.android.support:support-v4:' + rootProject.supportLibVersion

  compile 'io.reactivex:rxandroid:1.2.1'
  compile 'com.jakewharton.rxbinding:rxbinding:0.4.0'
  compile 'com.jakewharton.rxbinding:rxbinding-design:0.4.0'
  compile 'com.trello:rxlifecycle:1.0'
  compile 'com.trello:rxlifecycle-components:1.0'

  compile 'org.jetbrains.kotlin:kotlin-stdlib:' + rootProject.kotlinVersion

  compile 'org.jetbrains.anko:anko-sdk25:' + rootProject.ankoVersion
  compile 'org.jetbrains.anko:anko-recyclerview-v7:' + rootProject.ankoVersion
  compile 'org.jetbrains.anko:anko-design:' + rootProject.ankoVersion
  compile 'org.jetbrains.anko:anko-support-v4:' + rootProject.ankoVersion
  compile 'org.jetbrains.anko:anko-appcompat-v7:' + rootProject.ankoVersion

  compile 'com.jakewharton:butterknife:' + rootProject.butterknifeVersion
  compile 'com.squareup.retrofit2:retrofit:' + rootProject.retrofitVersion
  compile 'com.squareup.retrofit2:converter-gson:' + rootProject.retrofitVersion
  compile 'com.squareup.retrofit2:adapter-rxjava:' + rootProject.retrofitVersion
  compile 'com.google.dagger:dagger:' + rootProject.daggerVersion
  compile 'com.squareup.okhttp3:logging-interceptor:3.8.1'
  compile 'org.apache.commons:commons-lang3:3.7'

  debugCompile 'com.squareup.leakcanary:leakcanary-android:1.5'
  releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5'

  androidTestCompile "org.mockito:mockito-core:2.13.0"
  androidTestCompile "com.google.dexmaker:dexmaker:1.0"
  androidTestCompile "com.google.dexmaker:dexmaker-mockito:1.0"
  androidTestCompile 'com.android.support:support-annotations:' + rootProject.supportLibVersion
  androidTestCompile 'com.android.support.test:runner: ' + rootProject.runnerVersion
  androidTestCompile 'com.android.support.test:rules:' + rootProject.rulesVersion
  androidTestCompile 'com.android.support.test.espresso:espresso-core:' + rootProject.espressoVersion
  androidTestCompile 'com.android.support.test.espresso:espresso-intents:' + rootProject.espressoVersion

  androidTestCompile 'com.google.dagger:dagger:' + rootProject.daggerVersion
  androidTestAnnotationProcessor 'com.google.dagger:dagger-compiler:' + rootProject.daggerVersion
  compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
}

task releaseNewVersion(dependsOn: 'assembleRelease') << {
  Properties versionProps = new Properties()

  def file = file('version.properties')
  versionProps.load(new FileInputStream(file))

  def nextCode = versionProps['VERSION_CODE'].toInteger() + 1
  versionProps['VERSION_CODE'] = nextCode.toString()
  versionProps.store(file.newWriter(), null)
}
repositories {
  mavenCentral()
}
